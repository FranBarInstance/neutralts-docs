searchState.loadedDescShard("neutralts", 0, "neutral\nRepresents a JSON array.\nRepresents a JSON boolean.\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nRepresents a JSON string.\nRepresents any valid JSON value.\nIf the <code>Value</code> is an Array, returns the associated vector. …\nIf the <code>Value</code> is an Array, returns the associated mutable …\nIf the <code>Value</code> is a Boolean, returns the associated bool. …\nIf the <code>Value</code> is a number, represent it as f64 if possible. …\nIf the <code>Value</code> is an integer, represent it as i64 if …\nIf the <code>Value</code> is a Null, returns (). Returns None otherwise.\nIf the <code>Value</code> is a Number, returns the associated <code>Number</code>. …\nIf the <code>Value</code> is an Object, returns the associated Map. …\nIf the <code>Value</code> is an Object, returns the associated mutable …\nIf the <code>Value</code> is a String, returns the associated str. …\nIf the <code>Value</code> is an integer, represent it as u64 if …\nneutral\nDisplay a JSON value as a string.\nConvert string slice to <code>Value::String</code>.\nConvert <code>String</code> to <code>Value::String</code>.\nConvert boolean to <code>Value::Bool</code>.\nConvert 64-bit floating point number to <code>Value::Number</code>, or …\nConvert 32-bit floating point number to <code>Value::Number</code>, or …\nConvert <code>Number</code> to <code>Value::Number</code>.\nConvert <code>()</code> to <code>Value::Null</code>.\nConvert a slice to <code>Value::Array</code>.\nConvert copy-on-write string to <code>Value::String</code>.\nConvert a <code>Vec</code> to <code>Value::Array</code>.\nReturns the argument unchanged.\nConvert map (with string keys) to <code>Value::Object</code>.\nCreate a <code>Value::Object</code> by collecting an iterator of …\nCreate a <code>Value::Array</code> by collecting an iterator of array …\nIndex into a JSON array or map. A string index can be used …\nMutably index into a JSON array or map. A string index can …\nIndex into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or\nWrite into a <code>serde_json::Value</code> using the syntax …\nCalls <code>U::from(self)</code>.\nReturns true if the <code>Value</code> is an Array. Returns false …\nReturns true if the <code>Value</code> is a Boolean. Returns false …\nReturns true if the <code>Value</code> is a number that can be …\nReturns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …\nReturns true if the <code>Value</code> is a Null. Returns false …\nReturns true if the <code>Value</code> is a Number. Returns false …\nReturns true if the <code>Value</code> is an Object. Returns false …\nReturns true if the <code>Value</code> is a String. Returns false …\nReturns true if the <code>Value</code> is an integer between zero and …\nConstruct a <code>serde_json::Value</code> from a JSON literal.\nLooks up a value by a JSON Pointer.\nLooks up a value by a JSON Pointer and returns a mutable …\nReorders the entries of all <code>Value::Object</code> nested within …\nTakes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n{:allow; … :}\n{:array; … :}\n{:bool; … :}\n{:cache; … :}\n{:coalesce; … :}\n{:code; … :}\n{:contains; … :}\n{:count; … :}\n{:data; … :}\n{:date; … :}\n{:declare; … :}\n{:defined; … :}\n{:each; … :}\n{:else; … :}\n{:eval; … :}\n{:exit; … :}\n{:fetch; … :}\n{:filled; … :}\n{:flg; … :}\n{:for; … :}\n{:hash; … :}\n{:include; … :}\n{:join; … :}\n{:lang; … :}\n{:locale; … :}\n{:moveto; … :}\n{:neutral; … :}\n{:obj; … :}\n{:param; … :}\n{:rand; … :}\n{:redirect; … :}\n{:replace; … :}\n{:same; … :}\n{:snippet; … :}\n{:sum; … :}\n{:trans; … :}\n{:; … :} (var)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nhtml entity for Backspace\nbif alias list because some bifs have no name\nIdentify bif allow\nBif delimiters\nBif delimiters\nBIF_CLOSE 0 as bytes\nBIF_CLOSE 1 as bytes\nBIF_CLOSE as bytes\nBif delimiters\nBIF_CODE as bytes\nBif comment\nBIF_COMMENT as bytes\nBif comment close\nBIF_COMMENT_CLOSE as bytes\nBif comment open\nBIF_COMMENT_OPEN as bytes\nBif delimiters\ndelim as bytes\nbif list\nmodifier filter\nmodifier not\nmodifier scope\nmodifier upline\nBif delimiters\nBif delimiters\nBIF_OPEN 0 as bytes\nBIF_OPEN 1 as bytes\nBIF_OPEN as bytes\nreplacement for BIF_CLOSE sanitation\nreplacement for BIF_OPEN sanitation\nIdentify bif var as it has no name\nhtml entity for crlf\nHTML container auto for {:fetch; … :}\nHTML container click for {:fetch; … :}\nHTML container form for {:fetch; … :}\nHTML container none for {:fetch; … :}\nHTML container visible for {:fetch; … :}\nempty\nEmpty string could be different in different environments …\nfalse\nJavaScript for {:fetch; … :}\nhtml entity for null\nJavaScript script that redirects to a new URL in the self …\nJavaScript script that redirects to a new URL in the top …\nJavaScript script reloads the current, used in {:redirect;\nJavaScript script reloads the current top page, used in …\nTo detect the template files that may contain snippet\nhtml entity for space\nHTTP status codes\ntrue\nhtml entity for {:;:}\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nConstructs a new <code>Template</code> instance from a file path and a …\nGet bifs errors list\nRetrieves the status code.\nRetrieves the status parameter.\nRetrieves the status text.\nRetrieves the time duration for template rendering.\nChecks if there is an error.\nCalls <code>U::from(self)</code>.\nMerges the schema from a file with the current template …\nMerges the schema from a JSON string with the current …\nMerges the provided JSON value with the current schema.\nConstructs a new <code>Template</code> instance with default settings.\nRenders the template content.\nSets the source path of the template.\nSets the content of the template from a string.\nEscapes special characters in a given input string.\nExtract same level blocks positions.\nRecursively filter a Value with the function escape_chars\nRecursively filters the keys (names) of a Value with the …\nFinds the position of a tag in the text.\nFinds the position of the first occurrence of BIF_CODE_B …\nRetrieves a value from a JSON schema using a specified key.\nChecks if the value associated with a key in the schema is …\nChecks if the value associated with a key in the schema is …\nChecks if the value associated with a key in the schema is …\nChecks if the value associated with a key in the schema is …\nMerges two JSON schemas represented as <code>serde_json::Value</code>.\nRemoves comments from the template source.\nRemoves a prefix and suffix from a string slice.\nUnescapes HTML entities in a given input string.\nPerforms a wildcard matching between a text and a pattern.")